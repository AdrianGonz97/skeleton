#!/usr/bin/env node
import type { CssInJs } from 'postcss-js';
import { generateAllTWClasses, transpileCssToJs } from './compile-css-to-js.js';
import { mkdir, writeFile, unlink } from 'fs/promises';

const INTELLISENSE_FILE_NAME = 'intellisense-classes.js';

exec();

async function exec() {
	// Deletes the previously generated CSS-in-JS file. If we don't, our plugin will
	// add duplicate classes to our newly generated CSS-in-JS file.
	await unlink(`./src/tailwind/generated/${INTELLISENSE_FILE_NAME}`).catch(() => {
		// file doesn't exist, don't worry about it
	});

	// Makes directory that's used for caching
	await mkdir('./.temp').catch(() => {
		// directory already exists
	});

	// Makes directory that stores our generated CSS-in-JS
	await mkdir('./src/tailwind/generated').catch(() => {
		// directory already exists
	});

	const generatedJSS = await transpileCssToJs('./src/styles/test.css');
	const purgedJSS = await removeDuplicateClasses(generatedJSS);

	// Creates the generated CSS-in-JS file
	await writeFile(`./src/tailwind/generated/${INTELLISENSE_FILE_NAME}`, `export default ${JSON.stringify(purgedJSS)}`).catch((e) =>
		console.error(e)
	);
}

// Purges the generated CSS-in-JS file of duplicate TW classes
async function removeDuplicateClasses(cssInJs: CssInJs) {
	// let twClasses: CssInJs;
	// try {
	// 	// import the cached TW classes...
	// 	twClasses = await import('../.temp/twClasses.js');
	// 	// twClasses = classes;
	// } catch {
	// 	// if the cache doesn't exist (first time install), generate it
	// 	twClasses = await generateAllTWClasses();
	// }

	const mediaQueries = [];

	// We delete classes that have 'token' and 'bg-' in their name since those classes
	// will already be generated by our plugin. We'll also delete any default TW classes.
	for (const [key] of Object.entries(cssInJs)) {
		// if it's a media query, add it to the mediaQueries array to process later
		if (key.startsWith('@media')) {
			const isIterable = typeof cssInJs[key][Symbol.iterator] === 'function';
			if (isIterable) mediaQueries.push([key, cssInJs[key]]);
			else mediaQueries.push([key, [cssInJs[key]]]);
		}

		// if it's a token, delete it
		// if (key.includes('token')) delete cssInJs[key];

		// if it's a background color, delete it
		// if (key.includes('bg-')) delete cssInJs[key];

		// if it's not a class selector, delete it (only want classes in the intellisense)
		// if (key[0] !== '.') delete cssInJs[key];
		// deletes the dark variant of type selectors (ex: .dark body {...})
		// if (key.startsWith('.dark') && key[6] !== '.') delete cssInJs[key];

		// if (key.includes(':')) delete cssInJs[key];

		// if it's a default tailwind class, delete it
		// if (twClasses[key]) delete cssInJs[key];
	}

	// Add media queries of non-duplicate classes back to cssInJs
	for (const [mediaQuery, selectorsArray] of mediaQueries) {
		for (const selectors of selectorsArray) {
			for (const [selector, CSS] of Object.entries(selectors)) {
				if (selector in cssInJs) {
					// Non-duplicate class, add media query to cssInJs
					if (!cssInJs[selector][mediaQuery]) cssInJs[selector][mediaQuery] = [];
					cssInJs[selector][mediaQuery].push(CSS); // Add media query to class
				}
			}
		}
	}

	return cssInJs;
}
